/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * @input B : Head pointer of linked list 
 * 
 * @Output head pointer of list.
 */
listnode* mergeTwoLists(listnode* A, listnode* B) {
    listnode* p1=NULL;
    listnode* prev=NULL;
    listnode* c1=A;
    listnode* c2=B;
    listnode* h=NULL;
    
    if(c1->val < c2->val)
    {
        p1=c1;
        h=p1;
        c1=c1->next;
    }
    else if(c1->val > c2->val)
    {
        p1=c2;
        h=p1;
        c2=c2->next;
    }
    else if(c1->val == c2->val)
    {
        p1=c1;
        h=p1;
        c1=c1->next;
        p1->next=c2;
        p1=p1->next;
        c2=c2->next;
    }
    
    while(c1 || c2)
    {
        if(c1 && c2)
        {
            if(c1->val < c2->val)
            {
                p1->next=c1;
                p1=p1->next;
                c1=c1->next;
            }
            else if(c1->val > c2->val)
            {
                p1->next=c2;
                p1=p1->next;
                c2=c2->next;
            }
            else if(c1->val == c2->val)
            {
                p1->next=c1;
                p1=p1->next;
                c1=c1->next;
                p1->next=c2;
                p1=p1->next;
                c2=c2->next;
            }
        }
        else if(c1 && !c2)
        {
            p1->next=c1;
            break;
        }
        else if(c2 && !c1)
        {
            p1->next=c2;
            break;
        }
    }
    
    return h;
    
}
   



